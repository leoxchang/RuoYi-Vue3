package ${packageName}.domain.dto;

#foreach ($import in $importList)
import ${import};
#end
import io.swagger.v3.oas.annotations.media.Schema;
import ${packageName}.domain.po.${ClassName};
import lombok.Data;
import java.util.Date;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonFormat;
import lombok.ToString;
import com.truntao.common.annotation.Excel;
#if($table.crud || $table.sub)
#elseif($table.tree)
#end

/**
 * ${functionName}对象 ${tableName}
 *
 * @author ${author}
 * @date ${datetime}
 */
@Data
@ToString
public class ${ClassName}DTO{

    public ${ClassName}DTO(){

    }

    public ${ClassName}DTO(${ClassName} ${className}){
        if (Objects.nonNull(${className})) {
            #foreach ($column in $columns)
                #if($column.javaField.length() > 2 && $column.javaField.substring(1,2).matches("[A-Z]"))
                    #set($AttrName=$column.javaField)
                #else
                    #set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
                #end
                set${AttrName}(${className}.get${AttrName}());
            #end
        }
    }

#foreach ($column in $columns)
    /** $column.columnComment */
#set($parentheseIndex=$column.columnComment.indexOf("（"))
#if($parentheseIndex != -1)
#set($comment=$column.columnComment.substring(0, $parentheseIndex))
#else
#set($comment=$column.columnComment)
#end
    #if($parentheseIndex != -1)
    @Excel(name = "${comment}", readConverterExp = "$column.readConverterExp()")
    #elseif($column.javaType == 'Date')
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
    @Excel(name = "${comment}", width = 30, dateFormat = "yyyy-MM-dd HH:mm:ss")
    #else
    @Excel(name = "${comment}")
    #end
    @Schema(description = "$column.columnComment")
    private $column.javaType $column.javaField;
#end
#if($table.sub)
    /** $table.subTable.functionName信息 */
    private List<${subClassName}> ${subclassName}List;

#end

#if($table.sub)
    public List<${subClassName}> get${subClassName}List(){
        return ${subclassName}List;
    }

    public void set${subClassName}List(List<${subClassName}> ${subclassName}List){
        this.${subclassName}List = ${subclassName}List;
    }

#end
}
