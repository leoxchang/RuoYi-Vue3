package ${packageName}.service.impl;

import java.util.Arrays;
import com.github.pagehelper.Page;
import com.truntao.common.utils.SecurityUtils;
#foreach ($column in $columns)
    #if($column.javaField == 'createTime' || $column.javaField == 'updateTime')
import com.truntao.common.utils.DateUtils;
       #break
    #end
#end
import org.springframework.stereotype.Service;
#if($table.sub)
import java.util.ArrayList;
import com.truntao.common.utils.StringUtils;
import org.springframework.transaction.annotation.Transactional;
import ${packageName}.domain.po.${subClassName};
#end
import ${packageName}.mapper.${ClassName}Mapper;
import ${packageName}.domain.po.${ClassName};
import ${packageName}.service.I${ClassName}Service;
import ${packageName}.domain.dto.${ClassName}DTO;
import ${packageName}.domain.ro.${ClassName}Param;
import ${packageName}.domain.ro.${ClassName}UpdateParam;
import javax.annotation.Resource;

/**
 * ${functionName}Service业务层处理
 *
 * @author ${author}
 * @date ${datetime}
 */
@Service
public class ${ClassName}ServiceImpl implements I${ClassName}Service {

    @Resource
    private ${ClassName}Mapper ${className}Mapper;

    /**
     * 查询${functionName}
     *
     * @param ${pkColumn.javaField} ${functionName}主键
     * @return ${functionName}
     */
    @Override
    public ${ClassName}DTO select${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaType} ${pkColumn.javaField}) {
        ${ClassName} ${className} = ${className}Mapper.selectById(${pkColumn.javaField});
        return new ${ClassName}DTO(${className});
    }

    /**
     * 查询${functionName}列表
     *
     * @param ${className}Param ${functionName}
     * @return ${functionName}
     */
    @Override
    public Page<${ClassName}DTO> select${ClassName}List(${ClassName}Param ${className}Param) {
        ${ClassName} ${className} = ${className}Param.get${ClassName}();
        Page<${ClassName}DTO> page = new Page<>();
        try(Page<${ClassName}> list = ${className}Mapper.select${ClassName}List(${className})) {
            page.setTotal(list.getTotal());
            page.addAll(list.stream().map(${ClassName}DTO::new).toList());
        }
        return page;
    }

    /**
     * 新增${functionName}
     *
     * @param ${className}Param ${functionName}
     * @return 结果
     */
        #if($table.sub)
        @Transactional
        #end
    @Override
    public int insert${ClassName}(${ClassName}Param ${className}Param) {
        ${ClassName} ${className} = ${className}Param.get${ClassName}();
        #foreach ($column in $columns)
            #if($column.javaField == 'createTime')
                ${className}.setCreateTime(DateUtils.getNowDate());
            #end
            #if($column.javaField == 'createBy')
                ${className}.setCreateBy(SecurityUtils.getUsername());
            #end
        #end
        #if($table.sub)
            int rows = ${className}Mapper.insert(${className});
            insert${subClassName}(${className});
            return rows;
        #else
            return ${className}Mapper.insert(${className});
        #end
    }

    /**
     * 修改${functionName}
     *
     * @param ${className}UpdateParam ${functionName}
     * @return 结果
     */
        #if($table.sub)
        @Transactional
        #end
    @Override
    public int update${ClassName}(${ClassName}UpdateParam ${className}UpdateParam) {
        ${ClassName} ${className} = ${className}UpdateParam.get${ClassName}();
        #foreach ($column in $columns)
            #if($column.javaField == 'updateTime')
                ${className}.setUpdateTime(DateUtils.getNowDate());
            #end
            #if($column.javaField == 'updateBy')
                ${className}.setUpdateBy(SecurityUtils.getUsername());
            #end
        #end
        #if($table.sub)
                ${className}Mapper.delete${subClassName}By${subTableFkClassName}(${className}.get${pkColumn.capJavaField}())
            ;
            insert${subClassName}(${className});
        #end
        return ${className}Mapper.updateById(${className});
    }

    /**
     * 批量删除${functionName}
     *
     * @param ${pkColumn.javaField}s 需要删除的${functionName}主键
     * @return 结果
     */
        #if($table.sub)
        @Transactional
        #end
    @Override
    public int delete${ClassName}By${pkColumn.capJavaField}s(${pkColumn.javaType}[] ${pkColumn.javaField}s) {
        #if($table.sub)
                ${className}Mapper.delete${subClassName}By${subTableFkClassName}s(${pkColumn.javaField}s);
        #end
        return ${className}Mapper.deleteBatchIds(Arrays.asList(${pkColumn.javaField}s));
    }

    /**
     * 删除${functionName}信息
     *
     * @param ${pkColumn.javaField} ${functionName}主键
     * @return 结果
     */
        #if($table.sub)
        @Transactional
        #end
    @Override
    public int delete${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaType} ${pkColumn.javaField}) {
        #if($table.sub)
                ${className}Mapper.delete${subClassName}By${subTableFkClassName}(${pkColumn.javaField});
        #end
        return ${className}Mapper.deleteById(${pkColumn.javaField});
    }
    #if($table.sub)

        /**
         * 新增${subTable.functionName}信息
         *
         * @param ${className} ${functionName}对象
         */
        public void insert${subClassName}(${ClassName} ${className}) {
            List<${subClassName}> ${subclassName}List = ${className}.get${subClassName}List();
            ${pkColumn.javaType} ${pkColumn.javaField} = ${className}.get${pkColumn.capJavaField}();
            if (StringUtils.isNotNull(${subclassName}List)) {
                List<${subClassName}> list = new ArrayList<${subClassName}>();
                for (${subClassName} ${subclassName} :${subclassName}List)
                {
                    ${subclassName}.set${subTableFkClassName}(${pkColumn.javaField});
                    list.add(${subclassName});
                }
                if (list.size() > 0) {
                        ${className}Mapper.batch${subClassName}(list);
                }
            }
        }
    #end
}
