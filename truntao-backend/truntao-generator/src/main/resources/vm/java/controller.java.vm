package ${packageName}.controller;

import java.util.List;
import com.github.pagehelper.Page;
import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;

import io.swagger.v3.oas.annotations.Operation;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import ${packageName}.domain.dto.${ClassName}DTO;
import ${packageName}.domain.ro.${ClassName}Param;
import ${packageName}.domain.ro.${ClassName}UpdateParam;
import ${packageName}.service.I${ClassName}Service;
import com.truntao.common.utils.poi.ExcelUtil;
import com.truntao.common.annotation.Log;
import com.truntao.common.core.controller.BaseController;
import com.truntao.common.core.domain.R;
import com.truntao.common.enums.BusinessType;
#if($table.crud || $table.sub)
import com.truntao.common.core.page.PageDTO;
#elseif($table.tree)
#end

/**
 * ${functionName}Controller
 * 
 * @author ${author}
 * @date ${datetime}
 */
@RestController
@RequestMapping("/${moduleName}/${businessName}")
public class ${ClassName}Controller extends BaseController {
    @Resource
    private I${ClassName}Service ${className}Service;

    /**
     * 查询${functionName}列表
     */
    @Operation(summary = "查询${functionName}列表")
    @PreAuthorize("@ss.hasPermission('${permissionPrefix}:list')")
    @GetMapping("/list")
#if($table.crud || $table.sub)
    public R<PageDTO<${ClassName}DTO>> list(${ClassName}Param ${className}Param) {
        startPage();
        Page<${ClassName}DTO> list = ${className}Service.select${ClassName}List(${className}Param);
        return R.ok(new PageDTO<>(list));
    }
#elseif($table.tree)
    public R<List<${ClassName}DTO>> list(${ClassName}Param ${className}Param) {
        List<${ClassName}DTO> list = ${className}Service.select${ClassName}List(${className}Param);
        return R.ok(list);
    }
#end

    /**
     * 导出${functionName}列表
     */
    @Operation(summary = "导出${functionName}列表")
    @PreAuthorize("@ss.hasPermission('${permissionPrefix}:export')")
    @Log(title = "${functionName}", businessType = BusinessType.EXPORT)
    @PostMapping("/export")
    public void export(HttpServletResponse response, ${ClassName}Param ${className}Param) {
        List<${ClassName}DTO> list = ${className}Service.select${ClassName}List(${className}Param);
        ExcelUtil<${ClassName}DTO> util = new ExcelUtil<>(${ClassName}DTO.class);
        util.exportExcel(response, list, "${functionName}数据");
    }

    /**
     * 获取${functionName}详细信息
     */
    @Operation(summary = "获取${functionName}详细信息")
    @PreAuthorize("@ss.hasPermission('${permissionPrefix}:query')")
    @GetMapping(value = "/{${pkColumn.javaField}}")
    public R<${ClassName}DTO> getInfo(@PathVariable("${pkColumn.javaField}") ${pkColumn.javaType} ${pkColumn.javaField}) {
        return R.ok(${className}Service.select${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaField}));
    }

    /**
     * 新增${functionName}
     */
    @Operation(summary = "新增${functionName}")
    @PreAuthorize("@ss.hasPermission('${permissionPrefix}:add')")
    @Log(title = "${functionName}", businessType = BusinessType.INSERT)
    @PostMapping
    public R<Integer> add(@RequestBody ${ClassName}Param ${className}Param) {
        return R.ok(${className}Service.insert${ClassName}(${className}Param));
    }

    /**
     * 修改${functionName}
     */
    @Operation(summary = "修改${functionName}")
    @PreAuthorize("@ss.hasPermission('${permissionPrefix}:edit')")
    @Log(title = "${functionName}", businessType = BusinessType.UPDATE)
    @PutMapping
    public R<Integer> edit(@RequestBody ${ClassName}UpdateParam ${className}UpdateParam) {
        return R.ok(${className}Service.update${ClassName}(${className}UpdateParam));
    }

    /**
     * 删除${functionName}
     */
    @Operation(summary = "删除${functionName}")
    @PreAuthorize("@ss.hasPermission('${permissionPrefix}:remove')")
    @Log(title = "${functionName}", businessType = BusinessType.DELETE)
    @DeleteMapping("/{${pkColumn.javaField}s}")
    public R<Integer> remove(@PathVariable ${pkColumn.javaType}[] ${pkColumn.javaField}s) {
        return R.ok(${className}Service.delete${ClassName}By${pkColumn.capJavaField}s(${pkColumn.javaField}s));
    }
}
